<?php

declare(strict_types=1);

use Drupal\comment\CommentInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Image\ImageFactory;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\image\Entity\ImageStyle;
use Drupal\niklan\Hook\Entity\BaseFieldInfo;
use Drupal\niklan\Hook\Entity\BundleInfoAlter;
use Drupal\niklan\Hook\Theme\LibraryInfoAlter;
use Drupal\niklan\Hook\Theme\NiklanLightboxResponsiveImagePreprocess;
use Drupal\niklan\Hook\Theme\NiklanSearchResultsPreprocess;
use Drupal\niklan\Hook\Toolbar\ContentEditingToolbar;
use Drupal\responsive_image\Entity\ResponsiveImageStyle;
use Drupal\responsive_image\ResponsiveImageStyleInterface;

/**
 * Implements hook_theme().
 */
function niklan_theme(array $existing, string $type, string $theme, string $path): array {
  return [
    'niklan_follow' => [
      'variables' => [],
    ],
    'niklan_previous_next' => [
      'variables' => [
        'previous_url' => NULL,
        'previous_label' => NULL,
        'next_url' => NULL,
        'next_label' => NULL,
      ],
    ],
    'niklan_share' => [
      'variables' => [
        'url' => NULL,
        'text' => NULL,
      ],
    ],
    'niklan_toc' => [
      'variables' => [
        'links' => NULL,
      ],
    ],
    'niklan_contact_page' => [
      'variables' => [],
    ],
    'niklan_form_success' => [
      'variables' => [
        'title' => NULL,
        'message' => NULL,
      ],
    ],
    'niklan_copyright' => [
      'variables' => [
        'attributes' => [],
      ],
    ],
    'niklan_support_page' => [
      'variables' => [
        'attributes' => [],
      ],
    ],
    'niklan_last_content' => [
      'variables' => [
        'attributes' => [],
        'items' => [],
        'title' => NULL,
        'more_url' => NULL,
        'more_label' => NULL,
      ],
    ],
    'niklan_about' => [
      'variables' => [
        'photo_uri' => NULL,
        'heading' => NULL,
        'subtitle' => NULL,
        'summary' => NULL,
        'description' => NULL,
      ],
    ],
    'niklan_services_page' => [
      'variables' => [],
    ],
    'niklan_mobile_header_bar' => [
      'variables' => [
        'logo' => NULL,
      ],
    ],
    'niklan_comment_list' => [
      'variables' => [
        'attributes' => [],
        'comments' => [],
        'pager' => NULL,
      ],
    ],
    'niklan_media_attached_file' => [
      'variables' => [
        'attributes' => [],
        'uri' => NULL,
        'filename' => NULL,
        'filesize' => NULL,
        'label' => NULL,
      ],
    ],
    'niklan_oembed_video' => [
      'variables' => [
        'preview' => NULL,
        'content' => NULL,
      ],
    ],
    'niklan_blog_list' => [
      'variables' => [
        'items' => [],
        'pager' => NULL,
      ],
    ],
    'niklan_portfolio_list' => [
      'variables' => [
        'items' => [],
      ],
    ],
    'niklan_search_page' => [
      'variables' => [
        'header' => NULL,
        'content' => NULL,
      ],
    ],
    'niklan_search_results' => [
      'variables' => [
        'results' => [],
      ],
    ],
    'niklan_blog_meta' => [
      'variables' => [
        'created' => NULL,
        'comment_count' => NULL,
        'comments_url' => NULL,
        'estimated_read_time' => NULL,
      ],
    ],
    'niklan_tag_list' => [
      'variables' => [
        'items' => [],
      ],
    ],
    'niklan_sidebar_search_form' => [
      'variables' => [],
    ],
    'niklan_lightbox_responsive_image' => [
      'variables' => [
        'uri' => NULL,
        'thumbnail_responsive_image_style_id' => NULL,
        'lightbox_image_style_id' => NULL,
        'alt' => NULL,
        'title' => NULL,
        'attributes' => [],
      ],
    ],
    'niklan_comment_thread' => [
      'variables' => [
        'depth' => 0,
        'thread_id' => NULL,
        'comments' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_contact_tools_ajax_response_alter().
 *
 * Allows modules to alter AJAX response handled by the module. You can fully
 * alter, remove and add new commands to response.
 */
function niklan_contact_tools_ajax_response_alter(AjaxResponse &$ajax_response, array $form, FormStateInterface $form_state): void {
  if (!$form_state->isExecuted()) {
    return;
  }

  $class_name = '.' . Html::getClass($form['#form_id'] . '-contact-tools-processed');

  $message = new TranslatableMarkup('Thank you, your message was successfully sent.');
  $thanks = [
    '#theme' => 'niklan_form_success',
    '#title' => new TranslatableMarkup('Successful!'),
    '#message' => $message,
  ];
  $ajax_response->addCommand(new ReplaceCommand($class_name, $thanks));
}

/**
 * Implements hook_preprocess_HOOK().
 */
function niklan_preprocess_navigation(array &$variables): void {
  $variables['#attached']['library'][] = 'niklan/niklan.navigation';
}

/**
 * Implements hook_toolbar().
 */
function niklan_toolbar(): array {
  return array_merge(
    Drupal::classResolver(ContentEditingToolbar::class)(),
  );
}

/**
 * Implements hook_preprocess_HOOK() for 'responsive-image.html.twig'.
 */
function niklan_preprocess_responsive_image(array &$variables): void {
  // This hook is also set width and height required by default lazy loading
  // implementation. But this one called after, so with and height is not set
  // at the point when default lazy is added, so we force it.
  $variables['img_element']['#attributes']['loading'] = 'lazy';
  $variables['img_element']['#attributes']['decoding'] = 'async';

  $responsive_style = ResponsiveImageStyle::load(
    $variables['responsive_image_style_id'],
  );

  if (!$responsive_style instanceof ResponsiveImageStyleInterface) {
    return;
  }

  $image_factory = \Drupal::service('image.factory');
  \assert($image_factory instanceof ImageFactory);
  $fallback_style = ImageStyle::load(
    $responsive_style->getFallbackImageStyle(),
  );

  if (!$fallback_style instanceof ImageStyle) {
    return;
  }

  $fallback_image = $fallback_style->buildUri($variables['uri']);
  $image_factory->get($fallback_image);
  $variables['img_element']['#attributes']['width'] = $image_factory
    ->get($fallback_image)
    ->getWidth();
  $variables['img_element']['#attributes']['height'] = $image_factory
    ->get($fallback_image)
    ->getHeight();
}

/**
 * Implements hook_preprocess_HOOK() for 'image.html.twig'.
 */
function niklan_preprocess_image(array &$variables): void {
  $variables['attributes']['decoding'] = 'async';
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for text_textarea.
 */
function niklan_field_widget_text_textarea_form_alter(array &$element, FormStateInterface $form_state, array $context): void {
  $items = $context['items'];
  \assert($items instanceof FieldItemListInterface);
  $field_name = $items->getFieldDefinition()->getName();

  if ($field_name !== 'comment_body') {
    return;
  }

  $element['#after_build'][] = '_niklan_remove_text_textarea_format';
}

/**
 * After build callback to remove text_textarea format.
 */
function _niklan_remove_text_textarea_format(array $element, FormStateInterface $form_state): array {
  $is_admin = \Drupal::routeMatch()
    ->getRouteObject()
    ->hasOption('_admin_route');

  if ($element['#type'] === 'text_format' && !$is_admin) {
    hide($element['format']);
  }

  if ($element['#type'] === 'textarea') {
    $element['#description'] = new TranslatableMarkup(
      'Supports <a href="@common_mark_url" target="_blank">CommonMark</a> syntax.',
      ['@common_mark_url' => 'https://commonmark.org/help/'],
    );
  }

  return $element;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function niklan_comment_view(array &$build, CommentInterface $comment, EntityViewDisplayInterface $display, string $view_mode): void {
  if ($view_mode !== 'teaser') {
    return;
  }

  // Disable threading for teasers.
  $build['#comment_threaded'] = FALSE;
  // Reset inner counters which append unneeded '</div>'.
  $build['#comment_indent_final'] = 0;
}

/**
 * Implements hook_preprocess_HOOK() for username.html.twig.
 */
function niklan_preprocess_username(array &$variables): void {
  unset($variables['extra']);
  unset($variables['link_path']);
  unset($variables['attributes']['rel']);
  $variables['attributes']['class'][] = 'username';
}

/**
 * Prepares variables for search results.
 *
 * Default template: niklan-search-results.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - results: Array with results. It's also allowed to pass instance of
 *     \Drupal\niklan\Data\EntitySearchResults to automatically prepare
 *     results from it.
 */
function template_preprocess_niklan_search_results(array &$variables): void {
  \Drupal::classResolver(NiklanSearchResultsPreprocess::class)($variables);
}

/**
 * Implements hook_library_info_alter().
 */
function niklan_library_info_alter(array &$libraries, string $extension): void {
  \Drupal::classResolver(LibraryInfoAlter::class)($libraries, $extension);
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function niklan_entity_bundle_info_alter(array &$bundles): void {
  \Drupal::classResolver(BundleInfoAlter::class)($bundles);
}

/**
 * Implements hook_entity_base_field_info().
 */
function niklan_entity_base_field_info(EntityTypeInterface $entity_type): array {
  return \Drupal::classResolver(BaseFieldInfo::class)($entity_type);
}

function template_preprocess_niklan_lightbox_responsive_image(array &$variables): void {
  \Drupal::classResolver(NiklanLightboxResponsiveImagePreprocess::class)($variables);
}
