<?php

declare(strict_types=1);

use Drupal\comment\CommentInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\niklan\Hook\Entity\BaseFieldInfo;
use Drupal\niklan\Hook\Entity\BundleInfoAlter;
use Drupal\niklan\Hook\Entity\CommentInsert;
use Drupal\niklan\Hook\Theme\LibraryInfoAlter;
use Drupal\niklan\Hook\Theme\PreprocessNiklanHomeCards;
use Drupal\niklan\Hook\Theme\PreprocessNiklanLightboxResponsiveImage;
use Drupal\niklan\Hook\Theme\PreprocessPager;
use Drupal\niklan\Hook\Token\TokenInfo;
use Drupal\niklan\Hook\Token\Tokens;
use Drupal\niklan\Hook\Toolbar\ContentEditingToolbar;

/**
 * Implements hook_theme().
 */
function niklan_theme(array $existing, string $type, string $theme, string $path): array {
  return [
    'niklan_contact' => [
      'variables' => [
        'description' => NULL,
        'email' => NULL,
        'telegram' => NULL,
      ],
    ],
    'niklan_support' => [
      'variables' => [
        'description' => NULL,
        'donate_url' => NULL,
      ],
    ],
    'niklan_about' => [
      'variables' => [
        'photo_uri' => NULL,
        'heading' => NULL,
        'subtitle' => NULL,
        'summary' => NULL,
        'description' => NULL,
      ],
    ],
    'niklan_services' => [
      'variables' => [
        'description' => NULL,
        'hourly_rate' => NULL,
      ],
    ],
    'niklan_comment_list' => [
      'variables' => [
        'heading' => NULL,
        'items' => [],
      ],
    ],
    'niklan_blog_list' => [
      'variables' => [
        'items' => [],
        'pager' => NULL,
      ],
    ],
    'niklan_portfolio_list' => [
      'variables' => [
        'description' => [],
        'items' => [],
      ],
    ],
    'niklan_search_results' => [
      'variables' => [
        'query' => NULL,
        'no_query' => NULL,
        'no_results' => NULL,
        'results' => [],
        'pager' => NULL,
      ],
    ],
    'niklan_tag_list' => [
      'variables' => [
        'items' => [],
      ],
    ],
    'niklan_lightbox_responsive_image' => [
      'variables' => [
        'uri' => NULL,
        'thumbnail_responsive_image_style_id' => NULL,
        'lightbox_image_style_id' => NULL,
        'alt' => NULL,
        'title' => NULL,
        'attributes' => [],
      ],
    ],
    'niklan_comment_thread' => [
      'variables' => [
        'depth' => 0,
        'thread_id' => NULL,
        'comments' => [],
      ],
    ],
    'niklan_home' => [
      'variables' => [
        'sections' => [],
      ],
    ],
    'niklan_blog_preview_list' => [
      'variables' => [
        'heading' => NULL,
        'items' => [],
      ],
    ],
    'niklan_comment_reply_page' => [
      'variables' => [
        'children' => [],
      ],
    ],
    'niklan_home_intro' => [
      'variables' => [
        'heading' => NULL,
        'description' => NULL,
      ],
    ],
    'niklan_home_cards' => [
      'variables' => [
        'cards' => [],
      ],
    ],
    'niklan_article_banner' => [
      'variables' => [
        'poster_base64' => NULL,
        'text_lines' => [],
        'comment_count' => 0,
        'created' => 0,
      ],
    ],
    'niklan_sitemap' => [
      'variables' => [
        'sitemap' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function niklan_preprocess_navigation(array &$variables): void {
  $variables['#attached']['library'][] = 'niklan/niklan.navigation';
}

/**
 * Implements hook_toolbar().
 */
function niklan_toolbar(): array {
  return array_merge(
    Drupal::classResolver(ContentEditingToolbar::class)(),
  );
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter() for text_textarea.
 */
function niklan_field_widget_text_textarea_form_alter(array &$element, FormStateInterface $form_state, array $context): void {
  $items = $context['items'];
  assert($items instanceof FieldItemListInterface);
  $field_name = $items->getFieldDefinition()->getName();

  if ($field_name !== 'comment_body') {
    return;
  }

  $element['#after_build'][] = '_niklan_remove_text_textarea_format';
}

/**
 * After build callback to remove text_textarea format.
 */
function _niklan_remove_text_textarea_format(array $element, FormStateInterface $form_state): array {
  $is_admin = Drupal::routeMatch()->getRouteObject()?->hasOption('_admin_route') ?? FALSE;

  if ($element['#type'] === 'text_format' && !$is_admin) {
    hide($element['format']);
  }

  if ($element['#type'] === 'textarea') {
    $element['#description'] = new TranslatableMarkup(
      'Supports <a href="@common_mark_url" target="_blank">CommonMark</a> syntax.',
      ['@common_mark_url' => 'https://commonmark.org/help/'],
    );
  }

  return $element;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function niklan_comment_view(array &$build, CommentInterface $comment, EntityViewDisplayInterface $display, string $view_mode): void {
  // Disable threading for all situations. This is done through the theme and a
  // custom formatter. Unfortunately, it breaks a lot of things and is hardcoded
  // into the system using a pre-render.
  $build['#comment_threaded'] = FALSE;
  // Reset inner counters which append unneeded '</div>'.
  $build['#comment_indent_final'] = 0;
}

/**
 * Implements hook_preprocess_HOOK() for username.html.twig.
 */
function niklan_preprocess_username(array &$variables): void {
  unset($variables['extra']);
  unset($variables['link_path']);
  unset($variables['attributes']['rel']);
  $variables['attributes']['class'][] = 'username';
}

/**
 * Implements hook_library_info_alter().
 */
function niklan_library_info_alter(array &$libraries, string $extension): void {
  Drupal::classResolver(LibraryInfoAlter::class)($libraries, $extension);
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function niklan_entity_bundle_info_alter(array &$bundles): void {
  Drupal::classResolver(BundleInfoAlter::class)($bundles);
}

/**
 * Implements hook_entity_base_field_info().
 */
function niklan_entity_base_field_info(EntityTypeInterface $entity_type): array {
  return Drupal::classResolver(BaseFieldInfo::class)($entity_type);
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_niklan_lightbox_responsive_image(array &$variables): void {
  Drupal::classResolver(PreprocessNiklanLightboxResponsiveImage::class)($variables);
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_niklan_home_cards(array &$variables): void {
  Drupal::classResolver(PreprocessNiklanHomeCards::class)($variables);
}

/**
 * Implements hook_token_info().
 */
function niklan_token_info(): array {
  return Drupal::classResolver(TokenInfo::class)();
}

/**
 * Implements hook_tokens().
 */
function niklan_tokens(string $type, array $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata): array {
  return Drupal::classResolver(Tokens::class)($type, $tokens, $data, $options, $bubbleable_metadata);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function niklan_preprocess_pager(array &$variables): void {
  Drupal::classResolver(PreprocessPager::class)($variables);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function niklan_comment_insert(EntityInterface $entity): void {
  \Drupal::classResolver(CommentInsert::class)($entity);
}
