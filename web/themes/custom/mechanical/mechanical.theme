<?php

/**
 * @file
 * Custom hooks and functions special for theme.
 *
 * @todo Consider to try use TWIG with extends + attach_library for theme
 *   suggestion attachments.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\niklan\Utility\Anchor;

/**
 * Implements hook_preprocess().
 */
function mechanical_preprocess(array &$variables): void {
  // An array with libraries that must be attached on demand. This is done here
  // to simplify things for mechanical theme. You can attach them whatever you
  // want.
  // An array contains:
  // - theme_hook_original: The theme hook to attach to.
  //   - libraries: An array with libraries to attach to that theme hook.
  $dynamic_libraries = [
    'breadcrumb' => ['mechanical/component.ui.breadcrumb'],
    'links' => ['mechanical/component.ui.links'],
    'menu_local_tasks' => ['mechanical/component.ui.local-tasks'],
    'menu_local_action' => ['mechanical/component.ui.local-actions'],
    'vertical_tabs' => ['mechanical/component.ui.vertical-tabs'],
    'menu' => ['mechanical/component.ui.menu'],
    'page_title' => ['mechanical/component.ui.page-title'],
    'pager' => ['mechanical/component.ui.pager'],
    'status_messages' => ['mechanical/component.ui.status-messages'],
    // Project specific attachments.
    'niklan_follow' => ['mechanical/component.theme.follow'],
  ];

  $theme_hook_original = $variables['theme_hook_original'];
  if (array_key_exists($theme_hook_original, $dynamic_libraries)) {
    foreach ($dynamic_libraries[$theme_hook_original] as $library) {
      $variables['#attached']['library'][] = $library;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for 'region.html.twig'.
 */
function mechanical_preprocess_region(array &$variables): void {
  // An array with libraries to attach, keyed by region name.
  $dynamic_libraries = [
    'content' => ['mechanical/component.layout.region-content'],
    'content_top' => ['mechanical/component.layout.region-content-top'],
    'sidebar_right' => ['mechanical/component.layout.region-sidebar-right'],
  ];

  $region = $variables['region'];
  if (array_key_exists($region, $dynamic_libraries)) {
    foreach ($dynamic_libraries[$region] as $library) {
      $variables['#attached']['library'][] = $library;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for 'block.html.twig'.
 */
function mechanical_preprocess_block(array &$variables): void {
  // An array with libraries to attach, keyed by block ID.
  $dynamic_libraries = [
    'mechanical_page_title' => ['mechanical/component.block.page-title'],
    'mobile_header_bar' => ['mechanical/component.block.mobile-header-bar'],
    'toc' => ['mechanical/component.block.toc'],
    'mechanical_branding' => ['mechanical/component.block.branding'],
  ];

  $block_id = $variables['block_id'];
  if (array_key_exists($block_id, $dynamic_libraries)) {
    foreach ($dynamic_libraries[$block_id] as $library) {
      $variables['#attached']['library'][] = $library;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for 'field.html.twig'.
 */
function mechanical_preprocess_field(array &$variables): void {
  // The libraries to attach:
  // - entity_type_id: The entity type ID.
  //   - bundle: The bundle ID or '*' for all bundles.
  //     - field_name: The field name.
  //       - Array with libraries to attach.
  $dynamic_libraries = [
    'comment' => [
      'comment_node_blog_entry' => [
        'comment_body' => ['mechanical/component.comment.comment-node-blog-entry.field.comment-body'],
      ],
    ],
    'node' => [
      'blog_entry' => [
        'comment_node_blog_entry' => ['mechanical/component.node.blog-entry.field.node-blog-entry-comment-node-blog-entry'],
        'field_content' => ['mechanical/component.node.blog-entry.field.node-blog-entry-field-content'],
        'field_media_attachments' => ['mechanical/component.node.blog-entry.field.node-blog-entry-field-media-attachments'],
        'field_media_image' => ['mechanical/component.node.blog-entry.field.node-blog-entry-field-media-image'],
        'field_tags' => ['mechanical/component.node.blog-entry.field.node-blog-entry-field-tags'],
      ],
    ],
  ];

  $entity_type = $variables['entity_type'];
  $bundle = $variables['bundle'];
  $field_name = $variables['field_name'];
  if (array_key_exists($entity_type, $dynamic_libraries)) {
    $library_bundles = $dynamic_libraries[$entity_type];
    foreach ($library_bundles as $library_bundle => $library_fields) {
      if ($library_bundle != $bundle && $library_bundle != '*') {
        continue;
      }
      foreach ($library_fields as $library_field => $field_libraries) {
        if ($library_field != $field_name) {
          continue;
        }
        foreach ($field_libraries as $library) {
          $variables['#attached']['library'][] = $library;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for 'comment.html.twig'.
 */
function mechanical_preprocess_comment(array &$variables): void {
  // The libraries to attach:
  // - bundle: The bundle ID or '*' for all bundles.
  //   - view_mode: The view mode ID or '*' for all view modes.
  //     - An array with libraries.
  $dynamic_libraries = [
    'comment_node_blog_entry' => [
      'full' => ['mechanical/component.comment.comment-node-blog-entry.view-mode.full'],
      'teaser' => ['mechanical/component.comment.comment-node-blog-entry.view-mode.teaser'],
    ],
  ];

  $comment = $variables['comment'];
  $bundle = $comment->bundle();
  $view_mode = $variables['elements']['#view_mode'];
  foreach ($dynamic_libraries as $libraries_bundle => $bundle_view_modes) {
    if ($libraries_bundle != '*' && $libraries_bundle != $bundle) {
      continue;
    }
    foreach ($bundle_view_modes as $libraries_view_mode => $libraries) {
      if ($libraries_view_mode != '*' && $libraries_view_mode != $view_mode) {
        continue;
      }
      foreach ($libraries as $library) {
        $variables['#attached']['library'][] = $library;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for 'paragraph.html.twig'.
 */
function mechanical_preprocess_paragraph(array &$variables): void {
  // The libraries to attach:
  // - bundle: The bundle ID.
  $dynamic_libraries = [
    'code' => ['mechanical/component.paragraph.code'],
    'heading' => ['mechanical/component.paragraph.heading'],
    'important' => ['mechanical/component.paragraph.important'],
  ];

  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['paragraph'];
  $bundle = $paragraph->bundle();
  foreach ($dynamic_libraries as $bundle_to_attach => $libraries) {
    if ($bundle_to_attach != $bundle) {
      continue;
    }
    foreach ($libraries as $library) {
      $variables['#attached']['library'][] = $library;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for 'node.html.twig'.
 */
function mechanical_preprocess_node(array &$variables): void {
  // The libraries to attach:
  // - bundle: The bundle ID or '*' for all bundles.
  //   - view_mode: The view mode ID or '*' for all view modes.
  //     - An array with libraries.
  $dynamic_libraries = [
    'portfolio' => [
      'teaser' => ['mechanical/component.node.portfolio.view-mode.teaser'],
      'full' => ['mechanical/component.node.portfolio.view-mode.full'],
    ],
    'blog_entry' => [
      'teaser' => ['mechanical/component.node.blog-entry.view-mode.teaser'],
      'full' => ['mechanical/component.node.blog-entry.view-mode.full'],
      'search_result' => ['mechanical/component.node.blog-entry.view-mode.search-result'],
    ],
  ];

  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  $bundle = $node->bundle();
  $view_mode = $variables['elements']['#view_mode'];
  foreach ($dynamic_libraries as $libraries_bundle => $bundle_view_modes) {
    if ($libraries_bundle != '*' && $libraries_bundle != $bundle) {
      continue;
    }
    foreach ($bundle_view_modes as $libraries_view_mode => $libraries) {
      if ($libraries_view_mode != '*' && $libraries_view_mode != $view_mode) {
        continue;
      }
      foreach ($libraries as $library) {
        $variables['#attached']['library'][] = $library;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'comment_comment_node_blog_entry_form'.
 */
function mechanical_form_comment_comment_node_blog_entry_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  $form['#attached']['library'][] = 'mechanical/component.form.comment-comment-node-blog-entry-form';
}

/**
 * Implements hook_form_FORM_ID_alter() for 'niklan_node_search'.
 */
function mechanical_form_niklan_node_search_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  $form['#attached']['library'][] = 'mechanical/component.form.niklan-node-search';
}

/**
 * Implements hook_form_FORM_ID_alter() for 'niklan_node_search_sidebar'.
 */
function mechanical_form_niklan_node_search_sidebar_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  $form['#attached']['library'][] = 'mechanical/component.form.niklan-node-search-sidebar';
}

/**
 * Implements hook_preprocess_HOOK() for paragraph--heading.html.twig.
 */
function mechanical_preprocess_paragraph__heading(array &$variables): void {
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['paragraph'];

  $title = strip_tags($paragraph->get('field_title')->getString(), '<code><strong><em>');

  $variables['heading_level'] = $paragraph->get('field_heading_level')->getString();
  $variables['title'] = $title;
  $variables['anchor'] = Anchor::generate($title, 'druki_content_toc_theme', Anchor::REUSE);

  $variables['bem_modifiers'][] = $variables['heading_level'];
}

/**
 * Implements hook_preprocess_HOOK() for 'page.html.twig'.
 */
function mechanical_preprocess_page(array &$variables): void {
  $variables['druki_promo'] = [
    '#theme' => 'mechanical_navigation_druki',
    '#cache' => [
      'keys' => ['mechanical', 'navigation', 'druki'],
    ],
  ];

  $variables['russian_drupal_awards'] = [
    '#theme' => 'mechanical_russian_drupal_awards',
    '#cache' => [
      'keys' => ['mechanical', 'russia_drupal_awards'],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for 'page--front.html.twig'.
 */
function mechanical_preprocess_page__front(array &$variables): void {
  $variables['last_blog_posts'] = [
    '#type' => 'niklan_last_blog_posts',
  ];
}

/**
 * Implements hook_theme().
 */
function mechanical_theme(): array {
  return [
    'comment_form__node__blog_entry__comment_node_blog_entry' => [
      'render element' => 'form',
    ],
    'mechanical_dark_mode_toggle' => [
      'variables' => [],
    ],
    'mechanical_navigation_druki' => [
      'variables' => [],
    ],
    'mechanical_russian_drupal_awards' => [
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for menu--main.html.twig.
 */
function mechanical_preprocess_menu__main(array &$variables): void {
  $variables['#attached']['library'][] = 'mechanical/component.menu.main';
}

/**
 * Implements hook_preprocess_HOOK() for 'taxonomy-term--tags-teaser.html.twig'.
 */
function mechanical_preprocess_taxonomy_term__tags__teaser(array &$variables): void {
  $variables['#attached']['library'][] = 'mechanical/component.taxonomy-term.tags.teaser';
}

/**
 * Implements hook_preprocess_HOOK() for 'niklan-copyright.html.twig'.
 */
function mechanical_preprocess_niklan_copyright(array &$variables): void {
  $variables['dark_mode_toggle'] = [
    '#theme' => 'mechanical_dark_mode_toggle',
  ];
}

/**
 * Implements hook_preprocess_HOOK() for 'niklan-services-page.html.twig'.
 */
function mechanical_preprocess_niklan_services_page(array &$variables): void {
  $variables['language'] = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
}

/**
 * Implements hook_preprocess_HOOK() for 'niklan-contact-page.html.twig'.
 */
function mechanical_preprocess_niklan_contact_page(array &$variables): void {
  $variables['language'] = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
}
